/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as UploadRouteImport } from './routes/upload'
import { Route as UnauthenticatedRouteImport } from './routes/unauthenticated'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as PlaylistsRouteImport } from './routes/playlists'
import { Route as MySongsRouteImport } from './routes/my-songs'
import { Route as BrowseRouteImport } from './routes/browse'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SongIdIndexRouteImport } from './routes/song/$id/index'
import { Route as SongIdEditRouteImport } from './routes/song/$id/edit'
import { ServerRoute as ApiStripeWebhookServerRouteImport } from './routes/api/stripe/webhook'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const UploadRoute = UploadRouteImport.update({
  id: '/upload',
  path: '/upload',
  getParentRoute: () => rootRouteImport,
} as any)
const UnauthenticatedRoute = UnauthenticatedRouteImport.update({
  id: '/unauthenticated',
  path: '/unauthenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaylistsRoute = PlaylistsRouteImport.update({
  id: '/playlists',
  path: '/playlists',
  getParentRoute: () => rootRouteImport,
} as any)
const MySongsRoute = MySongsRouteImport.update({
  id: '/my-songs',
  path: '/my-songs',
  getParentRoute: () => rootRouteImport,
} as any)
const BrowseRoute = BrowseRouteImport.update({
  id: '/browse',
  path: '/browse',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SongIdIndexRoute = SongIdIndexRouteImport.update({
  id: '/song/$id/',
  path: '/song/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const SongIdEditRoute = SongIdEditRouteImport.update({
  id: '/song/$id/edit',
  path: '/song/$id/edit',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiStripeWebhookServerRoute = ApiStripeWebhookServerRouteImport.update({
  id: '/api/stripe/webhook',
  path: '/api/stripe/webhook',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/browse': typeof BrowseRoute
  '/my-songs': typeof MySongsRoute
  '/playlists': typeof PlaylistsRoute
  '/settings': typeof SettingsRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/unauthenticated': typeof UnauthenticatedRoute
  '/upload': typeof UploadRoute
  '/song/$id/edit': typeof SongIdEditRoute
  '/song/$id': typeof SongIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/browse': typeof BrowseRoute
  '/my-songs': typeof MySongsRoute
  '/playlists': typeof PlaylistsRoute
  '/settings': typeof SettingsRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/unauthenticated': typeof UnauthenticatedRoute
  '/upload': typeof UploadRoute
  '/song/$id/edit': typeof SongIdEditRoute
  '/song/$id': typeof SongIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/browse': typeof BrowseRoute
  '/my-songs': typeof MySongsRoute
  '/playlists': typeof PlaylistsRoute
  '/settings': typeof SettingsRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/unauthenticated': typeof UnauthenticatedRoute
  '/upload': typeof UploadRoute
  '/song/$id/edit': typeof SongIdEditRoute
  '/song/$id/': typeof SongIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/browse'
    | '/my-songs'
    | '/playlists'
    | '/settings'
    | '/sign-in'
    | '/sign-up'
    | '/unauthenticated'
    | '/upload'
    | '/song/$id/edit'
    | '/song/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/browse'
    | '/my-songs'
    | '/playlists'
    | '/settings'
    | '/sign-in'
    | '/sign-up'
    | '/unauthenticated'
    | '/upload'
    | '/song/$id/edit'
    | '/song/$id'
  id:
    | '__root__'
    | '/'
    | '/browse'
    | '/my-songs'
    | '/playlists'
    | '/settings'
    | '/sign-in'
    | '/sign-up'
    | '/unauthenticated'
    | '/upload'
    | '/song/$id/edit'
    | '/song/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BrowseRoute: typeof BrowseRoute
  MySongsRoute: typeof MySongsRoute
  PlaylistsRoute: typeof PlaylistsRoute
  SettingsRoute: typeof SettingsRoute
  SignInRoute: typeof SignInRoute
  SignUpRoute: typeof SignUpRoute
  UnauthenticatedRoute: typeof UnauthenticatedRoute
  UploadRoute: typeof UploadRoute
  SongIdEditRoute: typeof SongIdEditRoute
  SongIdIndexRoute: typeof SongIdIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/stripe/webhook': typeof ApiStripeWebhookServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/stripe/webhook': typeof ApiStripeWebhookServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/stripe/webhook': typeof ApiStripeWebhookServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$' | '/api/stripe/webhook'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$' | '/api/stripe/webhook'
  id: '__root__' | '/api/auth/$' | '/api/stripe/webhook'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiStripeWebhookServerRoute: typeof ApiStripeWebhookServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/upload': {
      id: '/upload'
      path: '/upload'
      fullPath: '/upload'
      preLoaderRoute: typeof UploadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/unauthenticated': {
      id: '/unauthenticated'
      path: '/unauthenticated'
      fullPath: '/unauthenticated'
      preLoaderRoute: typeof UnauthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playlists': {
      id: '/playlists'
      path: '/playlists'
      fullPath: '/playlists'
      preLoaderRoute: typeof PlaylistsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/my-songs': {
      id: '/my-songs'
      path: '/my-songs'
      fullPath: '/my-songs'
      preLoaderRoute: typeof MySongsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/browse': {
      id: '/browse'
      path: '/browse'
      fullPath: '/browse'
      preLoaderRoute: typeof BrowseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/song/$id/': {
      id: '/song/$id/'
      path: '/song/$id'
      fullPath: '/song/$id'
      preLoaderRoute: typeof SongIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/song/$id/edit': {
      id: '/song/$id/edit'
      path: '/song/$id/edit'
      fullPath: '/song/$id/edit'
      preLoaderRoute: typeof SongIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/stripe/webhook': {
      id: '/api/stripe/webhook'
      path: '/api/stripe/webhook'
      fullPath: '/api/stripe/webhook'
      preLoaderRoute: typeof ApiStripeWebhookServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BrowseRoute: BrowseRoute,
  MySongsRoute: MySongsRoute,
  PlaylistsRoute: PlaylistsRoute,
  SettingsRoute: SettingsRoute,
  SignInRoute: SignInRoute,
  SignUpRoute: SignUpRoute,
  UnauthenticatedRoute: UnauthenticatedRoute,
  UploadRoute: UploadRoute,
  SongIdEditRoute: SongIdEditRoute,
  SongIdIndexRoute: SongIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiStripeWebhookServerRoute: ApiStripeWebhookServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
